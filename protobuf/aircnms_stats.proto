syntax = "proto2";
package sts;

enum RadioBandType {
    BAND2G                                  = 0;
    BAND5G                                  = 1;
    BAND5GL                                 = 2;
    BAND5GU                                 = 3;
    BAND6G                                  = 4;
}

enum WmmAc {
    WMM_AC_VO                               = 1;
    WMM_AC_VI                               = 2;
    WMM_AC_BE                               = 3;
    WMM_AC_BK                               = 4;
}

enum ReportType {
    RAW                                     = 0;
    AVERAGE                                 = 1;
    HISTOGRAM                               = 2;
    PERCENTILE                              = 3;
    DIFF                                    = 4;
}

enum DiffType {
    ADDED                                   = 0;
    REMOVED                                 = 1;
}

enum ChanWidth {
    CHAN_WIDTH_UNKNOWN                      = 0;
    CHAN_WIDTH_20MHZ                        = 1;
    CHAN_WIDTH_40MHZ                        = 2;
    CHAN_WIDTH_40MHZ_ABOVE                  = 3;
    CHAN_WIDTH_40MHZ_BELOW                  = 4;
    CHAN_WIDTH_80MHZ                        = 5;
    CHAN_WIDTH_160MHZ                       = 6;
    CHAN_WIDTH_80_PLUS_80MHZ                = 7;
}

enum SurveyType {
    ON_CHANNEL                              = 0;
    OFF_CHANNEL                             = 1;
    FULL                                    = 2;
}

enum FsType {
    FS_TYPE_ROOTFS                          = 0;
    FS_TYPE_TMPFS                           = 1;
}

enum NeighborType  {
    ONCHAN_SCAN                             = 0;
    OFFCHAN_SCAN                            = 1;
    FULL_SCAN                               = 2;
}

enum PowerSupplyType {
    PS_TYPE_UNKNOWN                         = 0;
    PS_TYPE_AC                              = 1;
    PS_TYPE_BATTERY                         = 2;
    PS_TYPE_POE                             = 3;
    PS_TYPE_POE_PLUS                        = 4;
};

message Device {
        message LoadAvg {
        optional double     one                    = 1;
        optional double     five                   = 2;
        optional double     fifteen                = 3;
    }
    message RadioTemp {
        optional RadioBandType  band               = 1;
        optional int32          value              = 2;
    }
    optional LoadAvg        load                   = 1;
    repeated RadioTemp      radio_temp             = 2;
    optional uint64         timestamp_ms           = 3;
    optional uint32         uptime                 = 4;
    message Thermal {
        message RadioTxChainMask{
            optional RadioBandType band            = 1;
            optional uint32 value                  = 2;
        }
        repeated RadioTxChainMask txchainmask      = 1;
        optional uint32           fan_rpm          = 2;
        optional uint64           timestamp_ms     = 3;
    }
    repeated Thermal        thermal_stats          = 5;

    // Memory utilization: [kB]
    message MemUtil {
        required uint32     mem_total              = 1;
        required uint32     mem_used               = 2;
        optional uint32     swap_total             = 3;
        optional uint32     swap_used              = 4;
    }
    optional MemUtil mem_util                      = 6;

    // Filesystem utilization per FS-type: [kB]
    message FsUtil {
        required FsType     fs_type                = 1;
        required uint32     fs_total               = 2;
        required uint32     fs_used                = 3;
    }
    repeated FsUtil         fs_util                = 7;

    // CPU utilization: [percent]:
    message CpuUtil {
        optional uint32     cpu_util               = 1;
    }
    optional CpuUtil cpuUtil                       = 8;

    // Per-process CPU/MEM utilization:
    message PerProcessUtil {
        required uint32 pid                                 = 1;
        required string cmd                                 = 2;

        /* for cpu: [%CPU] [0..100]; for mem: [kB]  */
        required uint32 util                                = 3;
    }

    // top / most CPU/MEM consuming processes:
    repeated PerProcessUtil ps_cpu_util   = 9;
    repeated PerProcessUtil ps_mem_util   = 10;

    message PowerInfo {
        optional PowerSupplyType ps_type           = 1;
        optional uint32          p_consumption     = 2;
        optional uint32          batt_level        = 3;
    }
    optional PowerInfo powerInfo                   = 11;

}


message Client {
    message Stats {
        optional uint64     rx_bytes        = 1;
        optional uint64     tx_bytes        = 2;
        optional uint64     rx_frames       = 3;
        optional uint64     tx_frames       = 4;
        optional uint64     rx_retries      = 5;
        optional uint64     tx_retries      = 6;
        optional uint64     rx_errors       = 7;
        optional uint64     tx_errors       = 8;
        optional double     rx_rate         = 9; /* best-effort report of SU capacity, mbps */
        optional double     tx_rate         = 10; /* best-effort report of SU capacity, mbps */
        optional uint32     rssi            = 11;
        optional double     rx_rate_perceived = 12; /* accounts mixed SU+MU, mbps */
        optional double     tx_rate_perceived = 13; /* accounts mixed SU+MU, mbps */
    }
    message RxStats {
        message ChainRSSI {
            required uint32 chain           = 1;
            required uint32 ht              = 2; /* pri20(20MHz), sec20(40MHz), sec40(80MHz), sec80(160MHz) */
            optional uint32 rssi            = 3;
        }
        required uint32     mcs             = 1;
        required uint32     nss             = 2;
        required uint32     bw              = 3;
        optional uint64     bytes           = 4;
        optional uint64     msdus           = 5;
        optional uint64     mpdus           = 6;
        optional uint64     ppdus           = 7;
        optional uint64     retries         = 8;
        optional uint64     errors          = 9;
        optional uint32     rssi            = 10;
        repeated ChainRSSI  chain_rssi      = 11;
    }
    message TxStats {
        required uint32     mcs             = 1;
        required uint32     nss             = 2;
        required uint32     bw              = 3;
        optional uint64     bytes           = 4;
        optional uint64     msdus           = 5;
        optional uint64     mpdus           = 6;
        optional uint64     ppdus           = 7;
        optional uint64     retries         = 8;
        optional uint64     errors          = 9;
    }
    message TidStats {
        message Sojourn {
            required WmmAc  ac              = 1;    /* Acess category */
            required uint32 tid             = 2;    /* Traffic identifier queue number */
            optional uint32 ewma_time_ms    = 3;    /* Moving average value based on last couple of transmitted msdus */
            optional uint32 sum_time_ms     = 4;    /* Delta of cumulative msdus times over interval */
            optional uint32 num_msdus       = 5;    /* Number of msdus in given interval */
        }
        repeated Sojourn    sojourn         = 4;
        optional uint32     offset_ms       = 5;
   }

    required string     mac_address         = 1;
    optional string     ssid                = 2;
    optional bool       connected           = 3;
    optional uint32     connect_count       = 4;
    optional uint32     disconnect_count    = 5;
    optional uint32     connect_offset_ms   = 6;
    optional uint32     disconnect_offset_ms = 7;
    optional uint32     duration_ms         = 8;
    optional Stats      stats               = 9;
    repeated RxStats    rx_stats            = 10;
    repeated TxStats    tx_stats            = 11;
    repeated TidStats   tid_stats           = 12;
    optional uint32     uapsd               = 13;
    optional string     network_id          = 14;
}


message ClientReport {
    required RadioBandType  band            = 1;
    optional uint64         timestamp_ms    = 2;
    repeated Client         client_list     = 3;
    required uint32         channel         = 4;
    optional string         uplink_type     = 5;
    optional bool           uplink_changed  = 6;
}


message Vif {
    optional string radio 			= 1;
    optional string stat_ssid 		= 2;
    optional uint32 stat_num_sta 		= 3;
    optional uint32 stat_uplink_mb 		= 4;
    optional uint32 stat_downlink_mb 	= 5;
    optional uint64 timestamp_ms 		= 6;
}

message VifStatReport {
    optional uint64  timestamp_ms           = 1;
    repeated Vif   vif_list                 = 2;
}

message Neighbor {
    message NeighborBss {
        required string     bssid           = 1;
        optional string     ssid            = 2;
        optional uint32     rssi            = 3;
        optional uint64     tsf             = 4;
        optional ChanWidth  chan_width      = 5;
        required uint32     channel         = 6;
        optional DiffType   status          = 7;
    }
    required RadioBandType  band            = 1;
    required NeighborType   scan_type       = 2;
    optional uint64         timestamp_ms    = 3;
    repeated NeighborBss    bss_list        = 4;
    optional ReportType     report_type     = 5;
}

message Report {
	required string         serial_num	 = 1;
	required string	        device_id	 = 2;
	required string 	    mac_addr	 = 3;
    repeated ClientReport   clients	     = 4;
	repeated Device         device	     = 5;
	repeated VifStatReport	 vif 		 = 6;	
	repeated Neighbor       neighbors	 = 7;
}
